"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[687],{4707:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"frameworks","title":"Framework Integration","description":"PrecogX provides seamless integration with all major AI frameworks. Choose your framework below to get started with comprehensive AI agent security monitoring.","source":"@site/docs/frameworks.md","sourceDirName":".","slug":"/frameworks","permalink":"/docs/frameworks","draft":false,"unlisted":false,"editUrl":"https://github.com/precogxai/precogx-docs/tree/main/docs/frameworks.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Connecting Your First Agent","permalink":"/docs/getting-started/first-agent"},"next":{"title":"No-Code Platform Integration","permalink":"/docs/no-code-integration"}}');var t=r(4848),s=r(8453);const o={},a="Framework Integration",l={},c=[{value:"\ud83d\ude80 Quick Start",id:"-quick-start",level:2},{value:"\ud83d\udccb Integration Overview",id:"-integration-overview",level:2},{value:"<strong>What We Monitor:</strong>",id:"what-we-monitor",level:3},{value:"<strong>What We Detect:</strong>",id:"what-we-detect",level:3},{value:"<strong>What You Get:</strong>",id:"what-you-get",level:3},{value:"\ud83d\udd27 Installation",id:"-installation",level:2},{value:"<strong>Python SDK</strong>",id:"python-sdk",level:3},{value:"<strong>Framework-Specific Extensions</strong>",id:"framework-specific-extensions",level:3},{value:"<strong>JavaScript SDK</strong>",id:"javascript-sdk",level:3},{value:"LangChain Integration",id:"langchain-integration",level:2},{value:"<strong>Key Features:</strong>",id:"key-features",level:3},{value:"<strong>Installation</strong>",id:"installation",level:3},{value:"<strong>Basic Usage</strong>",id:"basic-usage",level:3},{value:"<strong>Advanced Configuration</strong>",id:"advanced-configuration",level:3},{value:"<strong>Tool Monitoring</strong>",id:"tool-monitoring",level:3},{value:"AutoGen Integration",id:"autogen-integration",level:2},{value:"<strong>Key Features:</strong>",id:"key-features-1",level:3},{value:"<strong>Installation</strong>",id:"installation-1",level:3},{value:"<strong>Basic Usage</strong>",id:"basic-usage-1",level:3},{value:"<strong>Multi-Agent Monitoring</strong>",id:"multi-agent-monitoring",level:3},{value:"<strong>Role-Based Security</strong>",id:"role-based-security",level:3},{value:"CrewAI Integration",id:"crewai-integration",level:2},{value:"<strong>Key Features:</strong>",id:"key-features-2",level:3},{value:"<strong>Installation</strong>",id:"installation-2",level:3},{value:"<strong>Basic Usage</strong>",id:"basic-usage-2",level:3},{value:"<strong>Task-Level Monitoring</strong>",id:"task-level-monitoring",level:3},{value:"Basic SDK Integration",id:"basic-sdk-integration",level:2},{value:"<strong>Key Features:</strong>",id:"key-features-3",level:3},{value:"<strong>Installation</strong>",id:"installation-3",level:3},{value:"<strong>Basic Usage</strong>",id:"basic-usage-3",level:3},{value:"<strong>Advanced Usage</strong>",id:"advanced-usage",level:3},{value:"<strong>Tool Call Monitoring</strong>",id:"tool-call-monitoring",level:3},{value:"\ud83d\udd0d Monitoring Examples",id:"-monitoring-examples",level:2},{value:"<strong>LangChain Agent</strong>",id:"langchain-agent",level:3},{value:"<strong>AutoGen Conversation</strong>",id:"autogen-conversation",level:3},{value:"<strong>CrewAI Team</strong>",id:"crewai-team",level:3},{value:"\ud83d\udee1\ufe0f Security Features",id:"\ufe0f-security-features",level:2},{value:"<strong>Real-Time Protection</strong>",id:"real-time-protection",level:3},{value:"<strong>Advanced Analytics</strong>",id:"advanced-analytics",level:3},{value:"<strong>Compliance &amp; Governance</strong>",id:"compliance--governance",level:3},{value:"\ud83d\udcde Support",id:"-support",level:2},{value:"\ud83d\ude80 Next Steps",id:"-next-steps",level:2}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"framework-integration",children:"Framework Integration"})}),"\n",(0,t.jsx)(e.p,{children:"PrecogX provides seamless integration with all major AI frameworks. Choose your framework below to get started with comprehensive AI agent security monitoring."}),"\n",(0,t.jsx)(e.h2,{id:"-quick-start",children:"\ud83d\ude80 Quick Start"}),"\n",(0,t.jsx)(e.p,{children:"Choose your framework below to get started:"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"#langchain-integration",children:"LangChain Integration"})})," - Most popular AI framework"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"#autogen-integration",children:"AutoGen Integration"})})," - Multi-agent conversations"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"#crewai-integration",children:"CrewAI Integration"})})," - Team-based AI agents"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.a,{href:"#basic-sdk-integration",children:"Basic SDK Integration"})})," - Direct API integration"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-integration-overview",children:"\ud83d\udccb Integration Overview"}),"\n",(0,t.jsx)(e.p,{children:"PrecogX provides seamless integration with all major AI frameworks:"}),"\n",(0,t.jsx)(e.h3,{id:"what-we-monitor",children:(0,t.jsx)(e.strong,{children:"What We Monitor:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Prompts & Responses"})," - Every AI interaction"]}),"\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Tool Calls"})," - Function executions and parameters"]}),"\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Agent Behavior"})," - Patterns and anomalies"]}),"\n",(0,t.jsxs)(e.li,{children:["\u2705 ",(0,t.jsx)(e.strong,{children:"Security Events"})," - Threats and violations"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"what-we-detect",children:(0,t.jsx)(e.strong,{children:"What We Detect:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\ud83d\udee1\ufe0f ",(0,t.jsx)(e.strong,{children:"Prompt Injection"})," - Attempts to manipulate AI behavior"]}),"\n",(0,t.jsxs)(e.li,{children:["\ud83d\udd12 ",(0,t.jsx)(e.strong,{children:"PII Leakage"})," - Sensitive data exposure"]}),"\n",(0,t.jsxs)(e.li,{children:["\ud83d\udeab ",(0,t.jsx)(e.strong,{children:"Content Moderation"})," - Inappropriate content"]}),"\n",(0,t.jsxs)(e.li,{children:["\ud83d\udd17 ",(0,t.jsx)(e.strong,{children:"Malicious Links"})," - Suspicious URLs and domains"]}),"\n",(0,t.jsxs)(e.li,{children:["\u26a0\ufe0f ",(0,t.jsx)(e.strong,{children:"Tool Abuse"})," - Dangerous function calls"]}),"\n",(0,t.jsxs)(e.li,{children:["\ud83d\udcca ",(0,t.jsx)(e.strong,{children:"Behavioral Drift"})," - Unexpected agent behavior"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"what-you-get",children:(0,t.jsx)(e.strong,{children:"What You Get:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["\ud83d\udcc8 ",(0,t.jsx)(e.strong,{children:"Real-time Trust Scores"})," - Dynamic agent reliability"]}),"\n",(0,t.jsxs)(e.li,{children:["\ud83d\udd14 ",(0,t.jsx)(e.strong,{children:"Instant Alerts"})," - Slack, Teams, or webhook notifications"]}),"\n",(0,t.jsxs)(e.li,{children:["\ud83d\udcca ",(0,t.jsx)(e.strong,{children:"Analytics Dashboard"})," - Comprehensive insights"]}),"\n",(0,t.jsxs)(e.li,{children:["\ud83d\udc65 ",(0,t.jsx)(e.strong,{children:"Human-in-the-Loop"})," - Manual validation when needed"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-installation",children:"\ud83d\udd27 Installation"}),"\n",(0,t.jsx)(e.h3,{id:"python-sdk",children:(0,t.jsx)(e.strong,{children:"Python SDK"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pip install precogx-sdk\n"})}),"\n",(0,t.jsx)(e.h3,{id:"framework-specific-extensions",children:(0,t.jsx)(e.strong,{children:"Framework-Specific Extensions"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'# LangChain support\npip install "precogx-sdk[langchain]"\n\n# AutoGen support\npip install "precogx-sdk[autogen]"\n\n# CrewAI support\npip install "precogx-sdk[crewai]"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"javascript-sdk",children:(0,t.jsx)(e.strong,{children:"JavaScript SDK"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"npm install @precogx/sdk\n"})}),"\n",(0,t.jsx)(e.h2,{id:"langchain-integration",children:"LangChain Integration"}),"\n",(0,t.jsx)(e.p,{children:"The most popular AI framework with seamless callback integration."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Perfect for:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Chatbots and conversational AI"}),"\n",(0,t.jsx)(e.li,{children:"Document processing and analysis"}),"\n",(0,t.jsx)(e.li,{children:"Tool-using agents"}),"\n",(0,t.jsx)(e.li,{children:"RAG (Retrieval-Augmented Generation) systems"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"key-features",children:(0,t.jsx)(e.strong,{children:"Key Features:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Automatic callback integration"}),"\n",(0,t.jsx)(e.li,{children:"Session tracking"}),"\n",(0,t.jsx)(e.li,{children:"Tool call monitoring"}),"\n",(0,t.jsx)(e.li,{children:"Conversation context preservation"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"installation",children:(0,t.jsx)(e.strong,{children:"Installation"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'pip install "precogx-sdk[langchain]"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"basic-usage",children:(0,t.jsx)(e.strong,{children:"Basic Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from langchain.agents import initialize_agent\nfrom precogx_langchain import PrecogXCallbackHandler\n\n# Initialize with PrecogX monitoring\nagent = initialize_agent(\n    tools=[...],\n    llm=...,\n    callbacks=[PrecogXCallbackHandler(api_key="your_key")]\n)\n\n# Every interaction is automatically monitored\nagent.run("What\'s the weather in New York?")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"advanced-configuration",children:(0,t.jsx)(e.strong,{children:"Advanced Configuration"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from precogx_langchain import PrecogXCallbackHandler\n\n# Configure with custom settings\nhandler = PrecogXCallbackHandler(\n    api_key="your_api_key",\n    agent_id="my-langchain-agent",\n    enable_tool_monitoring=True,\n    enable_behavior_tracking=True\n)\n\n# Use with any LangChain agent\nagent = initialize_agent(\n    tools=[...],\n    llm=...,\n    callbacks=[handler]\n)\n'})}),"\n",(0,t.jsx)(e.h3,{id:"tool-monitoring",children:(0,t.jsx)(e.strong,{children:"Tool Monitoring"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from langchain.tools import Tool\nfrom precogx_langchain import PrecogXCallbackHandler\n\n# Define tools with security monitoring\ndef dangerous_function(query: str) -> str:\n    # This will be monitored for tool abuse\n    return f"Executed: {query}"\n\ntool = Tool(\n    name="dangerous_function",\n    description="A potentially dangerous function",\n    func=dangerous_function\n)\n\n# PrecogX will monitor all tool calls\nagent = initialize_agent([tool], llm, callbacks=[handler])\n'})}),"\n",(0,t.jsx)(e.h2,{id:"autogen-integration",children:"AutoGen Integration"}),"\n",(0,t.jsx)(e.p,{children:"Multi-agent conversation framework with advanced monitoring."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Perfect for:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Multi-agent conversations"}),"\n",(0,t.jsx)(e.li,{children:"Agent-to-agent interactions"}),"\n",(0,t.jsx)(e.li,{children:"Complex workflows"}),"\n",(0,t.jsx)(e.li,{children:"Collaborative AI systems"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"key-features-1",children:(0,t.jsx)(e.strong,{children:"Key Features:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Multi-agent monitoring"}),"\n",(0,t.jsx)(e.li,{children:"Conversation flow analysis"}),"\n",(0,t.jsx)(e.li,{children:"Role-based security rules"}),"\n",(0,t.jsx)(e.li,{children:"Group dynamics tracking"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"installation-1",children:(0,t.jsx)(e.strong,{children:"Installation"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'pip install "precogx-sdk[autogen]"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"basic-usage-1",children:(0,t.jsx)(e.strong,{children:"Basic Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from autogen import AssistantAgent, UserProxyAgent\nfrom precogx_sdk import PrecogXClient\n\n# Monitor multi-agent conversations\nclient = PrecogXClient(api_key="your_key")\n\n# Every agent interaction is tracked\nassistant = AssistantAgent(name="assistant")\nuser_proxy = UserProxyAgent(name="user_proxy")\n\n# Conversation automatically monitored\nuser_proxy.initiate_chat(assistant, message="Hello!")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"multi-agent-monitoring",children:(0,t.jsx)(e.strong,{children:"Multi-Agent Monitoring"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from autogen import AssistantAgent, UserProxyAgent, GroupChat\nfrom precogx_sdk import PrecogXClient\n\nclient = PrecogXClient(api_key="your_key")\n\n# Create multiple agents\nassistant1 = AssistantAgent(name="assistant1")\nassistant2 = AssistantAgent(name="assistant2")\nuser_proxy = UserProxyAgent(name="user_proxy")\n\n# Group chat with monitoring\ngroup_chat = GroupChat(\n    agents=[assistant1, assistant2, user_proxy],\n    messages=[],\n    max_round=10\n)\n\n# All agent interactions are monitored\nuser_proxy.initiate_chat(group_chat, message="Let\'s discuss AI security")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"role-based-security",children:(0,t.jsx)(e.strong,{children:"Role-Based Security"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from precogx_sdk import PrecogXClient\n\nclient = PrecogXClient(api_key="your_key")\n\n# Configure different security rules per agent type\nassistant = AssistantAgent(\n    name="assistant",\n    system_message="You are a helpful assistant. Be careful with sensitive data."\n)\n\n# PrecogX will apply different security rules based on agent role\n'})}),"\n",(0,t.jsx)(e.h2,{id:"crewai-integration",children:"CrewAI Integration"}),"\n",(0,t.jsx)(e.p,{children:"Team-based AI agents with comprehensive monitoring."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Perfect for:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"AI teams and crews"}),"\n",(0,t.jsx)(e.li,{children:"Task delegation systems"}),"\n",(0,t.jsx)(e.li,{children:"Workflow automation"}),"\n",(0,t.jsx)(e.li,{children:"Collaborative projects"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"key-features-2",children:(0,t.jsx)(e.strong,{children:"Key Features:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Team-level monitoring"}),"\n",(0,t.jsx)(e.li,{children:"Task execution tracking"}),"\n",(0,t.jsx)(e.li,{children:"Workflow analysis"}),"\n",(0,t.jsx)(e.li,{children:"Performance metrics"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"installation-2",children:(0,t.jsx)(e.strong,{children:"Installation"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:'pip install "precogx-sdk[crewai]"\n'})}),"\n",(0,t.jsx)(e.h3,{id:"basic-usage-2",children:(0,t.jsx)(e.strong,{children:"Basic Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from crewai import Agent, Task, Crew\nfrom precogx_sdk import PrecogXClient\n\n# Monitor entire AI teams\nclient = PrecogXClient(api_key="your_key")\n\n# Team collaboration tracked\nresearcher = Agent(role="Researcher", goal="Find information")\nwriter = Agent(role="Writer", goal="Write content")\n\ncrew = Crew(agents=[researcher, writer], tasks=[...])\nresult = crew.kickoff()  # All interactions monitored\n'})}),"\n",(0,t.jsx)(e.h3,{id:"task-level-monitoring",children:(0,t.jsx)(e.strong,{children:"Task-Level Monitoring"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from crewai import Agent, Task, Crew\nfrom precogx_sdk import PrecogXClient\n\nclient = PrecogXClient(api_key="your_key")\n\n# Define agents with specific roles\nresearcher = Agent(\n    role="Researcher",\n    goal="Find accurate information",\n    backstory="You are a research expert"\n)\n\nwriter = Agent(\n    role="Writer", \n    goal="Create engaging content",\n    backstory="You are a content writer"\n)\n\n# Define tasks with monitoring\nresearch_task = Task(\n    description="Research AI security trends",\n    agent=researcher\n)\n\nwriting_task = Task(\n    description="Write a blog post about AI security",\n    agent=writer,\n    dependencies=[research_task]\n)\n\n# All task executions are monitored\ncrew = Crew(agents=[researcher, writer], tasks=[research_task, writing_task])\nresult = crew.kickoff()\n'})}),"\n",(0,t.jsx)(e.h2,{id:"basic-sdk-integration",children:"Basic SDK Integration"}),"\n",(0,t.jsx)(e.p,{children:"Direct API integration for custom implementations."}),"\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Perfect for:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Custom AI frameworks"}),"\n",(0,t.jsx)(e.li,{children:"Proprietary systems"}),"\n",(0,t.jsx)(e.li,{children:"Direct API control"}),"\n",(0,t.jsx)(e.li,{children:"Flexible implementations"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"key-features-3",children:(0,t.jsx)(e.strong,{children:"Key Features:"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Full API access"}),"\n",(0,t.jsx)(e.li,{children:"Custom integration points"}),"\n",(0,t.jsx)(e.li,{children:"Manual control"}),"\n",(0,t.jsx)(e.li,{children:"Framework agnostic"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"installation-3",children:(0,t.jsx)(e.strong,{children:"Installation"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"pip install precogx-sdk\n"})}),"\n",(0,t.jsx)(e.h3,{id:"basic-usage-3",children:(0,t.jsx)(e.strong,{children:"Basic Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from precogx_sdk import PrecogXClient\n\n# Initialize client\nclient = PrecogXClient(api_key="your_api_key")\n\n# Send telemetry data\nclient.send_telemetry({\n    "agent_id": "my-custom-agent",\n    "prompt": "What\'s the weather?",\n    "response": "It\'s sunny today.",\n    "metadata": {\n        "model": "gpt-4",\n        "platform": "custom",\n        "version": "1.0.0"\n    }\n})\n'})}),"\n",(0,t.jsx)(e.h3,{id:"advanced-usage",children:(0,t.jsx)(e.strong,{children:"Advanced Usage"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from precogx_sdk import PrecogXClient\n\nclient = PrecogXClient(api_key="your_api_key")\n\n# Monitor custom AI function\ndef my_ai_function(prompt: str) -> str:\n    # Your AI logic here\n    response = process_prompt(prompt)\n    \n    # Send telemetry\n    client.send_telemetry({\n        "agent_id": "custom-agent",\n        "prompt": prompt,\n        "response": response,\n        "metadata": {\n            "model": "custom-model",\n            "platform": "custom-framework",\n            "session_id": "session-123"\n        }\n    })\n    \n    return response\n'})}),"\n",(0,t.jsx)(e.h3,{id:"tool-call-monitoring",children:(0,t.jsx)(e.strong,{children:"Tool Call Monitoring"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from precogx_sdk import PrecogXClient\n\nclient = PrecogXClient(api_key="your_api_key")\n\n# Monitor tool calls\ndef dangerous_tool_call(parameters: dict) -> str:\n    # Send tool call telemetry\n    client.send_telemetry({\n        "agent_id": "my-agent",\n        "tool_calls": [{\n            "name": "dangerous_tool",\n            "arguments": parameters\n        }],\n        "metadata": {\n            "tool_risk_level": "high"\n        }\n    })\n    \n    # Execute tool\n    return execute_tool(parameters)\n'})}),"\n",(0,t.jsx)(e.h2,{id:"-monitoring-examples",children:"\ud83d\udd0d Monitoring Examples"}),"\n",(0,t.jsx)(e.h3,{id:"langchain-agent",children:(0,t.jsx)(e.strong,{children:"LangChain Agent"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from langchain.agents import initialize_agent\nfrom precogx_langchain import PrecogXCallbackHandler\n\n# Initialize with PrecogX monitoring\nagent = initialize_agent(\n    tools=[...],\n    llm=...,\n    callbacks=[PrecogXCallbackHandler(api_key="your_key")]\n)\n\n# Every interaction is automatically monitored\nagent.run("What\'s the weather in New York?")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"autogen-conversation",children:(0,t.jsx)(e.strong,{children:"AutoGen Conversation"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from autogen import AssistantAgent, UserProxyAgent\nfrom precogx_sdk import PrecogXClient\n\n# Monitor multi-agent conversations\nclient = PrecogXClient(api_key="your_key")\n\n# Every agent interaction is tracked\nassistant = AssistantAgent(name="assistant")\nuser_proxy = UserProxyAgent(name="user_proxy")\n\n# Conversation automatically monitored\nuser_proxy.initiate_chat(assistant, message="Hello!")\n'})}),"\n",(0,t.jsx)(e.h3,{id:"crewai-team",children:(0,t.jsx)(e.strong,{children:"CrewAI Team"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from crewai import Agent, Task, Crew\nfrom precogx_sdk import PrecogXClient\n\n# Monitor entire AI teams\nclient = PrecogXClient(api_key="your_key")\n\n# Team collaboration tracked\nresearcher = Agent(role="Researcher", goal="Find information")\nwriter = Agent(role="Writer", goal="Write content")\n\ncrew = Crew(agents=[researcher, writer], tasks=[...])\nresult = crew.kickoff()  # All interactions monitored\n'})}),"\n",(0,t.jsx)(e.h2,{id:"\ufe0f-security-features",children:"\ud83d\udee1\ufe0f Security Features"}),"\n",(0,t.jsx)(e.h3,{id:"real-time-protection",children:(0,t.jsx)(e.strong,{children:"Real-Time Protection"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Instant Detection"}),": Threats identified in milliseconds"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Automatic Blocking"}),": Dangerous actions prevented"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Human Validation"}),": Ambiguous cases sent for review"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Audit Trail"}),": Complete history of all events"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"advanced-analytics",children:(0,t.jsx)(e.strong,{children:"Advanced Analytics"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Trust Scoring"}),": Dynamic agent reliability metrics"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Behavioral Analysis"}),": Pattern recognition and anomalies"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Threat Intelligence"}),": Up-to-date threat detection"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Performance Metrics"}),": Efficiency and security insights"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"compliance--governance",children:(0,t.jsx)(e.strong,{children:"Compliance & Governance"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"SOC2 Compliance"}),": Enterprise-grade security"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"HIPAA Support"}),": Healthcare data protection"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Audit Logging"}),": Complete event history"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Role-Based Access"}),": Team permission management"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-support",children:"\ud83d\udcde Support"}),"\n",(0,t.jsx)(e.p,{children:"Need help with integration?"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Documentation"}),": Comprehensive guides for each framework"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Examples"}),": Real-world implementation examples"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Community"}),": Join our Discord for help"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Support"}),": Email us at ",(0,t.jsx)(e.a,{href:"mailto:support@precogx.ai",children:"support@precogx.ai"})]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"-next-steps",children:"\ud83d\ude80 Next Steps"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Choose your framework"})," from the guides above"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Follow the integration steps"})," in your chosen guide"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Test your implementation"})," with our demo scenarios"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Monitor your agents"})," in the dashboard"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Configure alerts"})," for security events"]}),"\n"]}),"\n",(0,t.jsx)(e.p,{children:"Ready to secure your AI agents? Choose your framework and let's get started! \ud83d\udee1\ufe0f"})]})}function g(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>o,x:()=>a});var i=r(6540);const t={},s=i.createContext(t);function o(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),i.createElement(s.Provider,{value:e},n.children)}}}]);