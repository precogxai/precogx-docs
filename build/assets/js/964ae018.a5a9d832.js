"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[824],{3588:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"api-reference","title":"API Reference","description":"Complete API reference for integrating PrecogX security monitoring into your custom AI applications and workflows.","source":"@site/docs/api-reference.md","sourceDirName":".","slug":"/api-reference","permalink":"/docs/api-reference","draft":false,"unlisted":false,"editUrl":"https://github.com/precogxai/precogx-docs/tree/main/docs/api-reference.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dify Integration Guide","permalink":"/docs/integrations/dify"},"next":{"title":"Layered Security Architecture","permalink":"/docs/architecture"}}');var r=t(4848),i=t(8453);const a={},l="API Reference",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Base URL",id:"base-url",level:2},{value:"Authentication",id:"authentication",level:2},{value:"API Key Authentication",id:"api-key-authentication",level:3},{value:"Getting Your API Key",id:"getting-your-api-key",level:3},{value:"Core Endpoints",id:"core-endpoints",level:2},{value:"Telemetry Ingestion",id:"telemetry-ingestion",level:3},{value:"Generic Telemetry Endpoint",id:"generic-telemetry-endpoint",level:4},{value:"Platform-Specific Endpoints",id:"platform-specific-endpoints",level:4},{value:"Request Schema",id:"request-schema",level:2},{value:"Required Fields",id:"required-fields",level:3},{value:"Optional Fields",id:"optional-fields",level:3},{value:"Metadata Schema",id:"metadata-schema",level:3},{value:"Tool Calls Schema",id:"tool-calls-schema",level:3},{value:"Response Codes",id:"response-codes",level:2},{value:"Error Responses",id:"error-responses",level:2},{value:"Common Error Codes",id:"common-error-codes",level:3},{value:"Rate Limits",id:"rate-limits",level:2},{value:"Integration Examples",id:"integration-examples",level:2},{value:"Python",id:"python",level:3},{value:"Node.js",id:"nodejs",level:3},{value:"Java",id:"java",level:3},{value:"Go",id:"go",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Batch Telemetry",id:"batch-telemetry",level:3},{value:"Async Telemetry",id:"async-telemetry",level:3},{value:"Custom Fields",id:"custom-fields",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Error Handling",id:"error-handling",level:3},{value:"Rate Limiting",id:"rate-limiting",level:3},{value:"Data Privacy",id:"data-privacy",level:3},{value:"Webhooks (Coming Soon)",id:"webhooks-coming-soon",level:2},{value:"Support",id:"support",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,r.jsx)(n.p,{children:"Complete API reference for integrating PrecogX security monitoring into your custom AI applications and workflows."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"The PrecogX API provides endpoints for sending telemetry data, managing agents, and retrieving security analytics. This reference covers all available endpoints, request/response formats, authentication, and integration patterns."}),"\n",(0,r.jsx)(n.h2,{id:"base-url",children:"Base URL"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"https://api.precogx.ai/api/v1\n"})}),"\n",(0,r.jsx)(n.h2,{id:"authentication",children:"Authentication"}),"\n",(0,r.jsx)(n.p,{children:"All API requests require authentication using an API key in the request header."}),"\n",(0,r.jsx)(n.h3,{id:"api-key-authentication",children:"API Key Authentication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Authorization: Bearer px_live_your_actual_api_key_here\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Alternative header format:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"x-api-key: px_live_your_actual_api_key_here\n"})}),"\n",(0,r.jsx)(n.h3,{id:"getting-your-api-key",children:"Getting Your API Key"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Sign in to your ",(0,r.jsx)(n.a,{href:"https://app.precogx.ai",children:"PrecogX Dashboard"})]}),"\n",(0,r.jsxs)(n.li,{children:["Navigate to ",(0,r.jsx)(n.strong,{children:"Settings"})," \u2192 ",(0,r.jsx)(n.strong,{children:"API Keys"})]}),"\n",(0,r.jsxs)(n.li,{children:["Click ",(0,r.jsx)(n.strong,{children:"Create API Key"})]}),"\n",(0,r.jsx)(n.li,{children:"Copy your key and store it securely"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-endpoints",children:"Core Endpoints"}),"\n",(0,r.jsx)(n.h3,{id:"telemetry-ingestion",children:"Telemetry Ingestion"}),"\n",(0,r.jsx)(n.p,{children:"Send AI interaction data to PrecogX for security analysis."}),"\n",(0,r.jsx)(n.h4,{id:"generic-telemetry-endpoint",children:"Generic Telemetry Endpoint"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /telemetry/ingest\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Headers:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"Content-Type: application/json\nx-api-key: px_live_your_actual_api_key_here\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Request Body:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "agentId": "string",\n  "prompt": "string",\n  "response": "string",\n  "metadata": {\n    "timestamp": "2024-01-15T10:30:00Z",\n    "userId": "user-123",\n    "sessionId": "session-456",\n    "platform": "custom",\n    "model": "gpt-4",\n    "tokens_used": 150\n  },\n  "toolCalls": [\n    {\n      "name": "search_database",\n      "input": {"query": "customer orders"},\n      "output": {"results": [...]}\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Response:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "status": "success",\n  "message": "Telemetry data ingested successfully",\n  "agentId": "custom-agent-1",\n  "interactionId": "int-789"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"platform-specific-endpoints",children:"Platform-Specific Endpoints"}),"\n",(0,r.jsx)(n.p,{children:"For better integration with specific platforms:"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Flowise Integration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /integrations/flowise/telemetry\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"n8n Integration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /integrations/n8n/telemetry\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Dify Integration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /integrations/dify/telemetry\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Custom Integration:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /integrations/custom/telemetry\n"})}),"\n",(0,r.jsx)(n.h2,{id:"request-schema",children:"Request Schema"}),"\n",(0,r.jsx)(n.h3,{id:"required-fields",children:"Required Fields"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"agentId"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Unique identifier for your AI agent"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"customer-support-bot"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"prompt"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"User input or prompt sent to the AI"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"What is your refund policy?"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"response"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"AI's response or output"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"Our refund policy allows..."'})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"optional-fields",children:"Optional Fields"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Example"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"metadata"})}),(0,r.jsx)(n.td,{children:"object"}),(0,r.jsx)(n.td,{children:"Additional context and information"}),(0,r.jsx)(n.td,{children:"See metadata schema below"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"toolCalls"})}),(0,r.jsx)(n.td,{children:"array"}),(0,r.jsx)(n.td,{children:"Tools or functions called by the AI"}),(0,r.jsx)(n.td,{children:"See tool calls schema below"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"userId"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Unique identifier for the user"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"user-12345"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"sessionId"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Session identifier"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"session-abcde"'})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"conversationId"})}),(0,r.jsx)(n.td,{children:"string"}),(0,r.jsx)(n.td,{children:"Conversation thread identifier"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:'"conv-67890"'})})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"metadata-schema",children:"Metadata Schema"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "metadata": {\n    "timestamp": "2024-01-15T10:30:00Z",\n    "platform": "custom",\n    "environment": "production",\n    "model": "gpt-4-turbo",\n    "model_provider": "openai",\n    "temperature": 0.7,\n    "max_tokens": 2000,\n    "tokens_used": 150,\n    "response_time_ms": 1200,\n    "user_agent": "MyApp/1.0",\n    "ip_address": "192.168.1.1",\n    "location": "US",\n    "language": "en",\n    "intent": "question",\n    "sentiment": "neutral",\n    "confidence_score": 0.95,\n    "custom_field_1": "custom_value_1"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"tool-calls-schema",children:"Tool Calls Schema"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "toolCalls": [\n    {\n      "name": "search_database",\n      "description": "Search customer database",\n      "input": {\n        "query": "customer orders",\n        "filters": {"status": "active"}\n      },\n      "output": {\n        "results": [...],\n        "count": 5\n      },\n      "execution_time_ms": 500,\n      "success": true\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"response-codes",children:"Response Codes"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Status"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"200"}),(0,r.jsx)(n.td,{children:"Success"}),(0,r.jsx)(n.td,{children:"Telemetry data processed successfully"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"400"}),(0,r.jsx)(n.td,{children:"Bad Request"}),(0,r.jsx)(n.td,{children:"Invalid request format or missing required fields"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"401"}),(0,r.jsx)(n.td,{children:"Unauthorized"}),(0,r.jsx)(n.td,{children:"Invalid or missing API key"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"403"}),(0,r.jsx)(n.td,{children:"Forbidden"}),(0,r.jsx)(n.td,{children:"API key valid but insufficient permissions"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"429"}),(0,r.jsx)(n.td,{children:"Too Many Requests"}),(0,r.jsx)(n.td,{children:"Rate limit exceeded"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"500"}),(0,r.jsx)(n.td,{children:"Internal Server Error"}),(0,r.jsx)(n.td,{children:"Server error processing request"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"error-responses",children:"Error Responses"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "error": {\n    "code": "INVALID_REQUEST",\n    "message": "Missing required field: agentId",\n    "details": {\n      "field": "agentId",\n      "expected": "string",\n      "received": "null"\n    }\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"common-error-codes",children:"Common Error Codes"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Code"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"Solution"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"INVALID_API_KEY"})}),(0,r.jsx)(n.td,{children:"API key is invalid or expired"}),(0,r.jsx)(n.td,{children:"Check your API key in dashboard"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"MISSING_REQUIRED_FIELD"})}),(0,r.jsx)(n.td,{children:"Required field missing from request"}),(0,r.jsx)(n.td,{children:"Include all required fields"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"INVALID_FIELD_TYPE"})}),(0,r.jsx)(n.td,{children:"Field type doesn't match expected type"}),(0,r.jsx)(n.td,{children:"Check field types in schema"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"RATE_LIMIT_EXCEEDED"})}),(0,r.jsx)(n.td,{children:"Too many requests in time period"}),(0,r.jsx)(n.td,{children:"Implement exponential backoff"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"AGENT_LIMIT_EXCEEDED"})}),(0,r.jsx)(n.td,{children:"Too many agents for your tier"}),(0,r.jsx)(n.td,{children:"Upgrade plan or reduce agents"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"rate-limits",children:"Rate Limits"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Tier"}),(0,r.jsx)(n.th,{children:"Requests per minute"}),(0,r.jsx)(n.th,{children:"Burst limit"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Free"}),(0,r.jsx)(n.td,{children:"100"}),(0,r.jsx)(n.td,{children:"200"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Professional"}),(0,r.jsx)(n.td,{children:"1,000"}),(0,r.jsx)(n.td,{children:"2,000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Business"}),(0,r.jsx)(n.td,{children:"5,000"}),(0,r.jsx)(n.td,{children:"10,000"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Enterprise"}),(0,r.jsx)(n.td,{children:"Custom"}),(0,r.jsx)(n.td,{children:"Custom"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"integration-examples",children:"Integration Examples"}),"\n",(0,r.jsx)(n.h3,{id:"python",children:"Python"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import requests\nimport json\nfrom datetime import datetime, timezone\n\nclass PrecogXClient:\n    def __init__(self, api_key):\n        self.api_key = api_key\n        self.base_url = "https://api.precogx.ai/api/v1"\n        self.headers = {\n            "Content-Type": "application/json",\n            "x-api-key": api_key\n        }\n    \n    def send_telemetry(self, agent_id, prompt, response, metadata=None, tool_calls=None):\n        """Send telemetry data to PrecogX"""\n        payload = {\n            "agentId": agent_id,\n            "prompt": prompt,\n            "response": response,\n            "metadata": metadata or {\n                "timestamp": datetime.now(timezone.utc).isoformat(),\n                "platform": "python-custom"\n            }\n        }\n        \n        if tool_calls:\n            payload["toolCalls"] = tool_calls\n        \n        try:\n            response = requests.post(\n                f"{self.base_url}/telemetry/ingest",\n                headers=self.headers,\n                json=payload,\n                timeout=10\n            )\n            response.raise_for_status()\n            return response.json()\n        except requests.exceptions.RequestException as e:\n            print(f"PrecogX telemetry failed: {e}")\n            return None\n\n# Usage example\nclient = PrecogXClient("px_live_your_actual_api_key_here")\n\nresult = client.send_telemetry(\n    agent_id="python-chatbot",\n    prompt="What\'s the weather like?",\n    response="I don\'t have access to real-time weather data.",\n    metadata={\n        "user_id": "user123",\n        "session_id": "sess456",\n        "model": "gpt-4",\n        "platform": "python-custom"\n    }\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"nodejs",children:"Node.js"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const axios = require('axios');\n\nclass PrecogXClient {\n    constructor(apiKey) {\n        this.apiKey = apiKey;\n        this.baseURL = 'https://api.precogx.ai/api/v1';\n        this.headers = {\n            'Content-Type': 'application/json',\n            'x-api-key': apiKey\n        };\n    }\n\n    async sendTelemetry(agentId, prompt, response, metadata = null, toolCalls = null) {\n        const payload = {\n            agentId,\n            prompt,\n            response,\n            metadata: metadata || {\n                timestamp: new Date().toISOString(),\n                platform: 'nodejs-custom'\n            }\n        };\n\n        if (toolCalls) {\n            payload.toolCalls = toolCalls;\n        }\n\n        try {\n            const result = await axios.post(\n                `${this.baseURL}/telemetry/ingest`,\n                payload,\n                { headers: this.headers, timeout: 10000 }\n            );\n            return result.data;\n        } catch (error) {\n            console.error('PrecogX telemetry failed:', error.message);\n            return null;\n        }\n    }\n}\n\n// Usage example\nconst client = new PrecogXClient('px_live_your_actual_api_key_here');\n\nclient.sendTelemetry(\n    'nodejs-assistant',\n    'Help me write a professional email',\n    'I\\'d be happy to help you write a professional email. What\\'s the purpose of the email?',\n    {\n        userId: 'user789',\n        sessionId: 'sess123',\n        model: 'gpt-4',\n        platform: 'nodejs-custom'\n    }\n).then(result => {\n    if (result) {\n        console.log('Telemetry sent successfully:', result);\n    }\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"java",children:"Java"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'import java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport java.net.URI;\nimport java.time.Instant;\nimport java.util.HashMap;\nimport java.util.Map;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class PrecogXClient {\n    private final String apiKey;\n    private final String baseUrl = "https://api.precogx.ai/api/v1";\n    private final HttpClient httpClient;\n    private final ObjectMapper objectMapper;\n\n    public PrecogXClient(String apiKey) {\n        this.apiKey = apiKey;\n        this.httpClient = HttpClient.newHttpClient();\n        this.objectMapper = new ObjectMapper();\n    }\n\n    public void sendTelemetry(String agentId, String prompt, String response, \n                            Map<String, Object> metadata) {\n        try {\n            Map<String, Object> payload = new HashMap<>();\n            payload.put("agentId", agentId);\n            payload.put("prompt", prompt);\n            payload.put("response", response);\n            \n            if (metadata == null) {\n                metadata = new HashMap<>();\n                metadata.put("timestamp", Instant.now().toString());\n                metadata.put("platform", "java-custom");\n            }\n            payload.put("metadata", metadata);\n\n            String jsonPayload = objectMapper.writeValueAsString(payload);\n\n            HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(baseUrl + "/telemetry/ingest"))\n                .header("Content-Type", "application/json")\n                .header("x-api-key", apiKey)\n                .POST(HttpRequest.BodyPublishers.ofString(jsonPayload))\n                .build();\n\n            HttpResponse<String> response = httpClient.send(request, \n                HttpResponse.BodyHandlers.ofString());\n\n            if (response.statusCode() == 200) {\n                System.out.println("Telemetry sent successfully");\n            } else {\n                System.err.println("Telemetry failed: " + response.body());\n            }\n        } catch (Exception e) {\n            System.err.println("PrecogX telemetry error: " + e.getMessage());\n        }\n    }\n}\n\n// Usage example\nPrecogXClient client = new PrecogXClient("px_live_your_actual_api_key_here");\n\nMap<String, Object> metadata = new HashMap<>();\nmetadata.put("userId", "user456");\nmetadata.put("model", "gpt-4");\nmetadata.put("platform", "java-custom");\n\nclient.sendTelemetry(\n    "java-assistant",\n    "Explain quantum computing",\n    "Quantum computing is a type of computation that harnesses quantum mechanics...",\n    metadata\n);\n'})}),"\n",(0,r.jsx)(n.h3,{id:"go",children:"Go"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "bytes"\n    "encoding/json"\n    "fmt"\n    "net/http"\n    "time"\n)\n\ntype PrecogXClient struct {\n    APIKey  string\n    BaseURL string\n    Client  *http.Client\n}\n\ntype TelemetryPayload struct {\n    AgentID   string                 `json:"agentId"`\n    Prompt    string                 `json:"prompt"`\n    Response  string                 `json:"response"`\n    Metadata  map[string]interface{} `json:"metadata,omitempty"`\n    ToolCalls []ToolCall             `json:"toolCalls,omitempty"`\n}\n\ntype ToolCall struct {\n    Name   string      `json:"name"`\n    Input  interface{} `json:"input"`\n    Output interface{} `json:"output"`\n}\n\nfunc NewPrecogXClient(apiKey string) *PrecogXClient {\n    return &PrecogXClient{\n        APIKey:  apiKey,\n        BaseURL: "https://api.precogx.ai/api/v1",\n        Client:  &http.Client{Timeout: 10 * time.Second},\n    }\n}\n\nfunc (c *PrecogXClient) SendTelemetry(agentID, prompt, response string, \n                                     metadata map[string]interface{}) error {\n    if metadata == nil {\n        metadata = map[string]interface{}{\n            "timestamp": time.Now().UTC().Format(time.RFC3339),\n            "platform":  "go-custom",\n        }\n    }\n\n    payload := TelemetryPayload{\n        AgentID:  agentID,\n        Prompt:   prompt,\n        Response: response,\n        Metadata: metadata,\n    }\n\n    jsonData, err := json.Marshal(payload)\n    if err != nil {\n        return fmt.Errorf("failed to marshal payload: %w", err)\n    }\n\n    req, err := http.NewRequest("POST", c.BaseURL+"/telemetry/ingest", \n                               bytes.NewBuffer(jsonData))\n    if err != nil {\n        return fmt.Errorf("failed to create request: %w", err)\n    }\n\n    req.Header.Set("Content-Type", "application/json")\n    req.Header.Set("x-api-key", c.APIKey)\n\n    resp, err := c.Client.Do(req)\n    if err != nil {\n        return fmt.Errorf("request failed: %w", err)\n    }\n    defer resp.Body.Close()\n\n    if resp.StatusCode != http.StatusOK {\n        return fmt.Errorf("API returned status %d", resp.StatusCode)\n    }\n\n    fmt.Println("Telemetry sent successfully")\n    return nil\n}\n\n// Usage example\nfunc main() {\n    client := NewPrecogXClient("px_live_your_actual_api_key_here")\n\n    metadata := map[string]interface{}{\n        "userId":   "user789",\n        "model":    "gpt-4",\n        "platform": "go-custom",\n    }\n\n    err := client.SendTelemetry(\n        "go-assistant",\n        "What are the benefits of microservices?",\n        "Microservices offer several benefits including scalability, flexibility...",\n        metadata,\n    )\n\n    if err != nil {\n        fmt.Printf("Error sending telemetry: %v\\n", err)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,r.jsx)(n.h3,{id:"batch-telemetry",children:"Batch Telemetry"}),"\n",(0,r.jsx)(n.p,{children:"Send multiple interactions in a single request:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST /telemetry/batch\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "interactions": [\n    {\n      "agentId": "batch-agent-1",\n      "prompt": "First question",\n      "response": "First response",\n      "metadata": {"timestamp": "2024-01-15T10:30:00Z"}\n    },\n    {\n      "agentId": "batch-agent-1",\n      "prompt": "Second question",\n      "response": "Second response",\n      "metadata": {"timestamp": "2024-01-15T10:31:00Z"}\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"async-telemetry",children:"Async Telemetry"}),"\n",(0,r.jsx)(n.p,{children:"For high-performance applications, use fire-and-forget telemetry:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport aiohttp\n\nasync def send_telemetry_async(session, payload):\n    async with session.post(\n        "https://api.precogx.ai/api/v1/telemetry/ingest",\n        json=payload,\n        headers={"x-api-key": "px_live_your_actual_api_key_here"}\n    ) as response:\n        return await response.json()\n\n# Usage\nasync with aiohttp.ClientSession() as session:\n    await send_telemetry_async(session, telemetry_data)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"custom-fields",children:"Custom Fields"}),"\n",(0,r.jsx)(n.p,{children:"Add custom fields to your telemetry for specific use cases:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "agentId": "custom-agent",\n  "prompt": "User question",\n  "response": "AI response",\n  "metadata": {\n    "custom_field_1": "value1",\n    "custom_field_2": 42,\n    "custom_field_3": true,\n    "business_unit": "sales",\n    "cost_center": "marketing",\n    "experiment_id": "exp-123"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.p,{children:"Always implement proper error handling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def send_telemetry_safe(client, data):\n    max_retries = 3\n    for attempt in range(max_retries):\n        try:\n            return client.send_telemetry(**data)\n        except requests.exceptions.RequestException as e:\n            if attempt == max_retries - 1:\n                logging.error(f"Failed to send telemetry after {max_retries} attempts: {e}")\n                return None\n            time.sleep(2 ** attempt)  # Exponential backoff\n'})}),"\n",(0,r.jsx)(n.h3,{id:"rate-limiting",children:"Rate Limiting"}),"\n",(0,r.jsx)(n.p,{children:"Respect rate limits with proper throttling:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import time\nfrom collections import deque\n\nclass RateLimiter:\n    def __init__(self, max_requests=100, time_window=60):\n        self.max_requests = max_requests\n        self.time_window = time_window\n        self.requests = deque()\n    \n    def can_make_request(self):\n        now = time.time()\n        # Remove old requests outside time window\n        while self.requests and self.requests[0] < now - self.time_window:\n            self.requests.popleft()\n        \n        if len(self.requests) < self.max_requests:\n            self.requests.append(now)\n            return True\n        return False\n"})}),"\n",(0,r.jsx)(n.h3,{id:"data-privacy",children:"Data Privacy"}),"\n",(0,r.jsx)(n.p,{children:"Filter sensitive information before sending:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"def sanitize_data(prompt, response):\n    # Remove PII patterns\n    import re\n    \n    # Remove email addresses\n    prompt = re.sub(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', '[EMAIL]', prompt)\n    response = re.sub(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', '[EMAIL]', response)\n    \n    # Remove phone numbers\n    prompt = re.sub(r'\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b', '[PHONE]', prompt)\n    response = re.sub(r'\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b', '[PHONE]', response)\n    \n    return prompt, response\n"})}),"\n",(0,r.jsx)(n.h2,{id:"webhooks-coming-soon",children:"Webhooks (Coming Soon)"}),"\n",(0,r.jsx)(n.p,{children:"Receive real-time security alerts via webhooks:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-http",children:"POST https://your-app.com/precogx/webhook\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "event": "threat_detected",\n  "agentId": "your-agent-id",\n  "threatType": "prompt_injection",\n  "severity": "high",\n  "timestamp": "2024-01-15T10:30:00Z",\n  "details": {\n    "confidence": 0.95,\n    "description": "Potential prompt injection detected"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"support",children:"Support"}),"\n",(0,r.jsx)(n.p,{children:"Need help with the API?"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\ud83d\udce7 ",(0,r.jsx)(n.strong,{children:"Email"}),": ",(0,r.jsx)(n.a,{href:"mailto:support@precogx.ai",children:"support@precogx.ai"})]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcac ",(0,r.jsx)(n.strong,{children:"Chat"}),": Available in your PrecogX dashboard"]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udcd6 ",(0,r.jsx)(n.strong,{children:"Documentation"}),": ",(0,r.jsx)(n.a,{href:"https://docs.precogx.ai",children:"docs.precogx.ai"})]}),"\n",(0,r.jsxs)(n.li,{children:["\ud83d\udc1b ",(0,r.jsx)(n.strong,{children:"Issues"}),": Report bugs on our GitHub"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Ready to integrate PrecogX into your AI application?"})," ",(0,r.jsx)(n.a,{href:"https://app.precogx.ai/settings/api-keys",children:"Get your API key today!"})]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(6540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);